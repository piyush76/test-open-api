# Server configuration
server.port=8080

# H2 Database configuration
spring.datasource.url=jdbc:h2:mem:testdb;MODE=PostgreSQL
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# H2 Console (for development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA configuration
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

# OpenAPI configuration
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method

# Security configuration (use environment variables in production)
spring.security.user.name=${SECURITY_USER_NAME:user}
spring.security.user.password=${SECURITY_USER_PASSWORD:password}
spring.security.user.roles=${SECURITY_USER_ROLES:USER}

# SQL Queries
userops.sql.getUserOpsEntity=SELECT personnel_id, company_id, ops_entity_id, ops_company_id, admin_role FROM user_ops_entity WHERE personnel_id = ? AND company_id = ?
userops.sql.updateOpsEntityAdminRole=UPDATE user_ops_entity SET admin_role = ? WHERE personnel_id = ? AND company_id = ?

# Customer Inventory Group SQL Queries
inventory.sql.getCustomerInventoryGroup=SELECT company_id, inventory_group, stocking_method, min_shelf_life, min_shelf_life_method, source_hub, dropship, relax_shelf_life, notused1, short_shelf_life_days FROM customer_inventory_group WHERE company_id = ? AND inventory_group = ? AND stocking_method = ?
inventory.sql.updateCustomerInventoryGroup=UPDATE customer_inventory_group SET min_shelf_life = ?, min_shelf_life_method = ?, source_hub = ?, dropship = ?, relax_shelf_life = ?, notused1 = ?, short_shelf_life_days = ? WHERE company_id = ? AND inventory_group = ? AND stocking_method = ?

# Logging
logging.level.org.jooq=DEBUG
logging.level.com.userops.api=DEBUG
